{"version":3,"file":"react-vis-graph-wrapper.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\nimport { DataSet } from 'vis-data';\nimport {\n  Network,\n  Edge,\n  Node,\n  Options,\n  NetworkEvents,\n  IdType,\n} from 'vis-network';\nimport {\n  differenceWith,\n  intersectionWith,\n  isEqual,\n  defaultsDeep,\n  cloneDeep,\n} from 'lodash';\n\nimport 'vis-network/styles/vis-network.css';\n\nexport type {\n  Network, Edge, Node, Options, NetworkEvents, IdType, \n};\n\nexport type GraphEvents = Partial<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRecord<NetworkEvents, (params?: any) => void>\n>;\n\nexport interface GraphData {\n  nodes: Node[];\n  edges: Edge[];\n}\n\nexport interface NetworkGraphProps {\n  graph: GraphData;\n  options?: Options;\n  getNetwork?: (network: any) => void;\n  events?: GraphEvents;\n  style?: React.CSSProperties;\n  className?: string;\n}\n/**\n * Keeps the value the same permanently.\n * Useful over refs especially in instances where the function creation variant is used\n */\nfunction useSealedState<T>(value: T | (() => T)) {\n  const [state] = useState(value);\n  return state;\n}\n\n/**\n * https://github.com/crubier/react-graph-vis/commit/68bf2e27b2046d6c0bb8b334c2cf974d23443264\n */\nconst diff = <T extends { id?: IdType }>(\n  current: T[],\n  next: T[],\n  field: keyof T = 'id',\n) => {\n  const nextIds = new Set(next.map((item) => item[field]));\n  const removed = current.filter((item) => !nextIds.has(item[field]));\n\n  const unchanged = intersectionWith(next, current, isEqual);\n\n  const updated = differenceWith(\n    intersectionWith(next, current, (a, b) => a[field] === b[field]),\n    unchanged,\n    isEqual,\n  );\n\n  const added = differenceWith(\n    differenceWith(next, current, isEqual),\n    updated,\n    isEqual,\n  );\n\n  return {\n    removed,\n    unchanged,\n    updated,\n    added,\n  };\n};\n\nconst defaultOptions = {\n  physics: {\n    stabilization: false,\n  },\n  autoResize: false,\n  edges: {\n    smooth: false,\n    color: '#000000',\n    width: 0.5,\n    arrows: {\n      to: {\n        enabled: true,\n        scaleFactor: 0.5,\n      },\n    },\n  },\n};\n\nfunction useResizeObserver(\n  ref: React.MutableRefObject<HTMLElement | null>,\n  callback: ResizeObserverCallback,\n): void {\n  useEffect(() => {\n    // Create an observer instance linked to the callback function\n    if (ref.current) {\n      const observer = new ResizeObserver(callback);\n\n      // Start observing the target node for configured mutations\n      observer.observe(ref.current);\n\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return;\n  }, [callback, ref]);\n}\n\nconst VisGraph = forwardRef<\nNetwork | undefined,\nNetworkGraphProps & HTMLAttributes<HTMLDivElement>\n>(({ graph, events, getNetwork, options: propOptions, ...props }, ref) => {\n  const container = useRef<HTMLDivElement>(null);\n  const edges = useSealedState(() => new DataSet<Edge>(graph.edges));\n  const nodes = useSealedState(() => new DataSet<Node>(graph.nodes));\n  const initialOptions = useSealedState(propOptions);\n\n  const prevNodes = useRef(graph.nodes);\n  const prevEdges = useRef(graph.edges);\n  useEffect(() => {\n    if (isEqual(graph.nodes, prevNodes.current)) {\n      return; // No change!\n    }\n    const { added, removed, updated } = diff(prevNodes.current, graph.nodes);\n\n    nodes.remove(removed);\n    nodes.add(added);\n    nodes.update(updated);\n    prevNodes.current = graph.nodes;\n  }, [graph.nodes, nodes]);\n\n  useEffect(() => {\n    if (isEqual(graph.edges, prevEdges.current)) {\n      return; // No change!\n    }\n    const { added, removed, updated } = diff(prevEdges.current, graph.edges);\n\n    edges.remove(removed);\n    edges.add(added);\n    edges.update(updated);\n    prevEdges.current = graph.edges;\n  }, [graph.edges, edges]);\n  const [network, setNetwork] = useState<Network>();\n\n  useImperativeHandle(ref, () => network, [network]);\n\n  useEffect(() => {\n    if (!network || !events) {\n      return () => {};\n    }\n    // Add user provied events to network\n    for (const [eventName, callback] of Object.entries(events)) {\n      if (callback) {\n        network.on(eventName as NetworkEvents, callback);\n      }\n    }\n    return () => {\n      for (const [eventName, callback] of Object.entries(events)) {\n        if (callback) {\n          network.off(eventName as NetworkEvents, callback);\n        }\n      }\n    };\n  }, [events, network]);\n\n  useEffect(() => {\n    if (!network || !propOptions) {\n      return;\n    }\n    try {\n      network.setOptions(propOptions);\n    } catch (error) {\n      // Throws when it hot reloads... Yay\n      if (process.env.NODE_ENV !== 'development') {\n        // Still throw it in prod where there's no hot reload\n        throw error;\n      }\n    }\n  }, [network, propOptions]);\n\n  useEffect(() => {\n    // Creating the network has to be done in a useEffect because it needs access to a ref\n\n    // merge user provied options with our default ones\n    // defaultsDeep mutates the host object\n    const mergedOptions = defaultsDeep(\n      cloneDeep(initialOptions),\n      defaultOptions,\n    );\n    const newNetwork = new Network(\n      container.current as HTMLElement,\n      { edges, nodes },\n      mergedOptions,\n    );\n    setNetwork(newNetwork);\n    if(getNetwork) {\n      getNetwork(newNetwork)\n    }\n    return () => {\n      // Cleanup the network on component unmount\n      newNetwork.destroy();\n    };\n  }, [edges, initialOptions, nodes]);\n\n  //resize network on window resize\n  function onContainerResize(){\n    if (network){\n      network.redraw();\n    }\n  }\n\n  useResizeObserver(container, onContainerResize);\n\n  return <div style={ { width: '100%', height: '100%' }} ref={container} {...props} />;\n});\n\nexport default VisGraph;"],"names":["useSealedState","value","useState","diff","current","next","field","nextIds","Set","map","item","removed","filter","has","unchanged","intersectionWith","isEqual","updated","differenceWith","a","b","added","defaultOptions","physics","stabilization","autoResize","edges","smooth","color","width","arrows","to","enabled","scaleFactor","forwardRef","ref","graph","events","getNetwork","propOptions","options","props","container","useRef","DataSet","nodes","initialOptions","prevNodes","prevEdges","useEffect","remove","add","update","network","setNetwork","useImperativeHandle","Object","entries","callback","on","off","setOptions","error","mergedOptions","defaultsDeep","cloneDeep","newNetwork","Network","destroy","observer","ResizeObserver","observe","disconnect","useResizeObserver","redraw","React","style","height"],"mappings":"qTAqDA,SAASA,EAAkBC,UACTC,WAASD,MAO3B,IAAME,EAAO,SACXC,EACAC,EACAC,YAAAA,IAAAA,EAAiB,UAEXC,EAAU,IAAIC,IAAIH,EAAKI,KAAI,SAACC,UAASA,EAAKJ,OAC1CK,EAAUP,EAAQQ,QAAO,SAACF,UAAUH,EAAQM,IAAIH,EAAKJ,OAErDQ,EAAYC,mBAAiBV,EAAMD,EAASY,WAE5CC,EAAUC,iBACdH,mBAAiBV,EAAMD,GAAS,SAACe,EAAGC,UAAMD,EAAEb,KAAWc,EAAEd,MACzDQ,EACAE,iBASK,CACLL,QAAAA,EACAG,UAAAA,EACAG,QAAAA,EACAI,MAVYH,iBACZA,iBAAeb,EAAMD,EAASY,WAC9BC,EACAD,aAWEM,EAAiB,CACrBC,QAAS,CACPC,eAAe,GAEjBC,YAAY,EACZC,MAAO,CACLC,QAAQ,EACRC,MAAO,UACPC,MAAO,GACPC,OAAQ,CACNC,GAAI,CACFC,SAAS,EACTC,YAAa,uBA0BJC,cAGf,WAAgEC,OAA7DC,IAAAA,MAAOC,IAAAA,OAAQC,IAAAA,WAAqBC,IAATC,QAAyBC,0IACjDC,EAAYC,SAAuB,MACnCjB,EAAQ1B,GAAe,kBAAM,IAAI4C,UAAcR,EAAMV,UACrDmB,EAAQ7C,GAAe,kBAAM,IAAI4C,UAAcR,EAAMS,UACrDC,EAAiB9C,EAAeuC,GAEhCQ,EAAYJ,SAAOP,EAAMS,OACzBG,EAAYL,SAAOP,EAAMV,OAC/BuB,aAAU,eACJjC,UAAQoB,EAAMS,MAAOE,EAAU3C,gBAGCD,EAAK4C,EAAU3C,QAASgC,EAAMS,OAA1DxB,IAAAA,MAAgBJ,IAAAA,QAExB4B,EAAMK,SAFSvC,SAGfkC,EAAMM,IAAI9B,GACVwB,EAAMO,OAAOnC,GACb8B,EAAU3C,QAAUgC,EAAMS,SACzB,CAACT,EAAMS,MAAOA,IAEjBI,aAAU,eACJjC,UAAQoB,EAAMV,MAAOsB,EAAU5C,gBAGCD,EAAK6C,EAAU5C,QAASgC,EAAMV,OAA1DL,IAAAA,MAAgBJ,IAAAA,QAExBS,EAAMwB,SAFSvC,SAGfe,EAAMyB,IAAI9B,GACVK,EAAM0B,OAAOnC,GACb+B,EAAU5C,QAAUgC,EAAMV,SACzB,CAACU,EAAMV,MAAOA,UACaxB,aAAvBmD,OAASC,cAEhBC,sBAAoBpB,GAAK,kBAAMkB,IAAS,CAACA,IAEzCJ,aAAU,eACHI,IAAYhB,SACR,2BAG2BmB,OAAOC,QAAQpB,kBAAS,YAArCqB,OACjBA,GACFL,EAAQM,QAA+BD,UAGpC,yBAC+BF,OAAOC,QAAQpB,kBAAS,YAArCqB,OACjBA,GACFL,EAAQO,SAAgCF,OAI7C,CAACrB,EAAQgB,IAEZJ,aAAU,cACHI,GAAYd,MAIfc,EAAQQ,WAAWtB,GACnB,MAAOuB,SAICA,KAGT,CAACT,EAASd,IAEbU,aAAU,eAKFc,EAAgBC,eACpBC,YAAUnB,GACVxB,GAEI4C,EAAa,IAAIC,UACrBzB,EAAUtC,QACV,CAAEsB,MAAAA,EAAOmB,MAAAA,GACTkB,UAEFT,EAAWY,GACR5B,GACDA,EAAW4B,GAEN,WAELA,EAAWE,aAEZ,CAAC1C,EAAOoB,EAAgBD,IAlH7B,SACEV,EACAuB,GAEAT,aAAU,cAEJd,EAAI/B,QAAS,KACTiE,EAAW,IAAIC,eAAeZ,UAGpCW,EAASE,QAAQpC,EAAI/B,SAEd,WACLiE,EAASG,iBAIZ,CAACd,EAAUvB,IA0GdsC,CAAkB/B,cALZW,GACFA,EAAQqB,YAMLC,qCAAKC,MAAQ,CAAE/C,MAAO,OAAQgD,OAAQ,QAAU1C,IAAKO,GAAeD"}