{"version":3,"file":"react-vis-graph-wrapper.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\nimport { DataSet } from 'vis-data';\nimport {\n  Network,\n  Edge,\n  Node,\n  Options,\n  NetworkEvents,\n  IdType,\n} from 'vis-network';\nimport {\n  differenceWith,\n  intersectionWith,\n  isEqual,\n  defaultsDeep,\n  cloneDeep,\n} from 'lodash';\n\nimport 'vis-network/styles/vis-network.css';\n\nexport type {\n  Network, Edge, Node, Options, NetworkEvents, IdType, \n};\n\nexport type GraphEvents = Partial<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nRecord<NetworkEvents, (params?: any) => void>\n>;\n\nexport interface GraphData {\n  nodes: Node[];\n  edges: Edge[];\n}\n\nexport interface NetworkGraphProps {\n  graph: GraphData;\n  options?: Options;\n  getNetwork?: (network: any) => void;\n  events?: GraphEvents;\n  style?: React.CSSProperties;\n  className?: string;\n}\n/**\n * Keeps the value the same permanently.\n * Useful over refs especially in instances where the function creation variant is used\n */\nfunction useSealedState<T>(value: T | (() => T)) {\n  const [state] = useState(value);\n  return state;\n}\n\n/**\n * https://github.com/crubier/react-graph-vis/commit/68bf2e27b2046d6c0bb8b334c2cf974d23443264\n */\nconst diff = <T extends { id?: IdType }>(\n  current: T[],\n  next: T[],\n  field: keyof T = 'id',\n) => {\n  const nextIds = new Set(next.map((item) => item[field]));\n  const removed = current.filter((item) => !nextIds.has(item[field]));\n\n  const unchanged = intersectionWith(next, current, isEqual);\n\n  const updated = differenceWith(\n    intersectionWith(next, current, (a, b) => a[field] === b[field]),\n    unchanged,\n    isEqual,\n  );\n\n  const added = differenceWith(\n    differenceWith(next, current, isEqual),\n    updated,\n    isEqual,\n  );\n\n  return {\n    removed,\n    unchanged,\n    updated,\n    added,\n  };\n};\n\nconst defaultOptions = {\n  physics: {\n    stabilization: false,\n  },\n  autoResize: false,\n  edges: {\n    smooth: false,\n    color: '#000000',\n    width: 0.5,\n    arrows: {\n      to: {\n        enabled: true,\n        scaleFactor: 0.5,\n      },\n    },\n  },\n};\n\nfunction useResizeObserver(\n  ref: React.MutableRefObject<HTMLElement | null>,\n  callback: ResizeObserverCallback,\n): void {\n  useEffect(() => {\n    // Create an observer instance linked to the callback function\n    if (ref.current) {\n      const observer = new ResizeObserver(callback);\n\n      // Start observing the target node for configured mutations\n      observer.observe(ref.current);\n\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return;\n  }, [callback, ref]);\n}\n\nconst VisGraph = forwardRef<\nNetwork | undefined,\nNetworkGraphProps & HTMLAttributes<HTMLDivElement>\n>(({ graph, events, getNetwork, options: propOptions, ...props }, ref) => {\n  const container = useRef<HTMLDivElement>(null);\n  const edges = useSealedState(() => new DataSet<Edge>(graph.edges));\n  const nodes = useSealedState(() => new DataSet<Node>(graph.nodes));\n  const initialOptions = useSealedState(propOptions);\n\n  const prevNodes = useRef(graph.nodes);\n  const prevEdges = useRef(graph.edges);\n  useEffect(() => {\n    if (isEqual(graph.nodes, prevNodes.current)) {\n      return; // No change!\n    }\n    const { added, removed, updated } = diff(prevNodes.current, graph.nodes);\n\n    nodes.remove(removed);\n    nodes.add(added);\n    nodes.update(updated);\n    prevNodes.current = graph.nodes;\n  }, [graph.nodes, nodes]);\n\n  useEffect(() => {\n    if (isEqual(graph.edges, prevEdges.current)) {\n      return; // No change!\n    }\n    const { added, removed, updated } = diff(prevEdges.current, graph.edges);\n\n    edges.remove(removed);\n    edges.add(added);\n    edges.update(updated);\n    prevEdges.current = graph.edges;\n  }, [graph.edges, edges]);\n  const [network, setNetwork] = useState<Network>();\n\n  useImperativeHandle(ref, () => network, [network]);\n\n  useEffect(() => {\n    if (!network || !events) {\n      return () => {};\n    }\n    // Add user provied events to network\n    for (const [eventName, callback] of Object.entries(events)) {\n      if (callback) {\n        network.on(eventName as NetworkEvents, callback);\n      }\n    }\n    return () => {\n      for (const [eventName, callback] of Object.entries(events)) {\n        if (callback) {\n          network.off(eventName as NetworkEvents, callback);\n        }\n      }\n    };\n  }, [events, network]);\n\n  useEffect(() => {\n    if (!network || !propOptions) {\n      return;\n    }\n    try {\n      network.setOptions(propOptions);\n    } catch (error) {\n      // Throws when it hot reloads... Yay\n      if (process.env.NODE_ENV !== 'development') {\n        // Still throw it in prod where there's no hot reload\n        throw error;\n      }\n    }\n  }, [network, propOptions]);\n\n  useEffect(() => {\n    // Creating the network has to be done in a useEffect because it needs access to a ref\n\n    // merge user provied options with our default ones\n    // defaultsDeep mutates the host object\n    const mergedOptions = defaultsDeep(\n      cloneDeep(initialOptions),\n      defaultOptions,\n    );\n    const newNetwork = new Network(\n      container.current as HTMLElement,\n      { edges, nodes },\n      mergedOptions,\n    );\n    setNetwork(newNetwork);\n    if(getNetwork) {\n      getNetwork(newNetwork)\n    }\n    return () => {\n      // Cleanup the network on component unmount\n      newNetwork.destroy();\n    };\n  }, [edges, initialOptions, nodes]);\n\n  //resize network on window resize\n  function onContainerResize(){\n    if (network){\n      network.redraw();\n    }\n  }\n\n  useResizeObserver(container, onContainerResize);\n\n  return <div style={ { width: '100%', height: '100%' }} ref={container} {...props} />;\n});\n\nexport default VisGraph;"],"names":["useSealedState","value","useState","state","diff","current","next","field","nextIds","Set","map","item","removed","filter","has","unchanged","intersectionWith","isEqual","updated","differenceWith","a","b","added","defaultOptions","physics","stabilization","autoResize","edges","smooth","color","width","arrows","to","enabled","scaleFactor","useResizeObserver","ref","callback","useEffect","observer","ResizeObserver","observe","disconnect","VisGraph","forwardRef","graph","events","getNetwork","propOptions","options","props","container","useRef","DataSet","nodes","initialOptions","prevNodes","prevEdges","remove","add","update","network","setNetwork","useImperativeHandle","Object","entries","eventName","on","off","setOptions","error","process","env","NODE_ENV","mergedOptions","defaultsDeep","cloneDeep","newNetwork","Network","destroy","onContainerResize","redraw","React","style","height"],"mappings":"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"}